{"version":3,"file":"static/js/690.1a648f39.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","webpack://react-homework-template/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.js","pages/MoviesPage/MoviesPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesListContainer = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 14px;\n`;\n\nexport const MovieItem = styled.li`\n  margin: 10px;\n  text-align: center;\n\n  a {\n    text-decoration: none;\n    color: #333;\n\n    img {\n      max-width: 300px;\n      height: auto;\n      border-radius: 8px;\n      margin-bottom: 8px;\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      transition: transform 0.3s ease;\n\n      &:hover {\n        transform: scale(1.05);\n      }\n    }\n\n    p {\n      margin: 15px;\n      font-weight: bold;\n      font-size: 18px;\n      text-align: center;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      max-width: 250px;\n    }\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\n\nimport { MoviesListContainer, MovieItem } from './MoviesList.styled';\n\nimport mainplaceholder from 'services/mainplaceholder.png';\n\nexport const MoviesList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesListContainer>\n      {films.map(film => (\n        <MovieItem key={film.id}>\n          <Link to={`/movies/${film.id}`} state={{ from: location }}>\n            <img\n              src={\n                film.poster_path\n                  ? `https://image.tmdb.org/t/p/w500${film.poster_path}`\n                  : mainplaceholder\n              }\n              alt={film.title}\n              style={\n                !film.poster_path ? { width: '300px', height: 'auto' } : {}\n              }\n            />\n            <p>{film.title}</p>\n          </Link>\n        </MovieItem>\n      ))}\n    </MoviesListContainer>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Div\":\"Searchbar_Div__0HDNt\",\"SearchForm\":\"Searchbar_SearchForm__XuPyK\",\"SearchFormButton\":\"Searchbar_SearchFormButton__dksRa\",\"SearchFormInput\":\"Searchbar_SearchFormInput__FT6Bx\"};","import { Formik, Form, Field } from 'formik';\nimport css from './Searchbar.module.css';\n\nexport const Searchbar = ({ onSubmit }) => {\n  return (\n    <div className={css.Div}>\n      <Formik\n        initialValues={{\n          query: '',\n        }}\n        onSubmit={(values, actions) => {\n          onSubmit(values.query);\n\n          actions.resetForm();\n        }}\n      >\n        <Form className={css.SearchForm}>\n          <button type=\"submit\" className={css.SearchFormButton}>\n            <span className={css.SearchFormButtonLabel}>ðŸ”Ž</span>\n          </button>\n          <Field\n            className={css.SearchFormInput}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            name=\"query\"\n            placeholder=\"Search movies\"\n          />\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { searchMovies } from 'services/api';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { LoadingMessage, ErrorMessage } from '../HomePage/HomePage.styled';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [params, setParams] = useSearchParams();\n\n  const query = params.get('query');\n  useEffect(() => {\n    if (!query) return;\n\n    const handleSearch = async () => {\n      try {\n        setIsLoading(true);\n        const fetchedMovies = await searchMovies(query);\n        setMovies(fetchedMovies.results);\n        if (fetchedMovies.results.length === 0) {\n          setError('notFound');\n        } else {\n          setError(null);\n        }\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    handleSearch();\n  }, [query]);\n\n  const handleSubmit = query => {\n    setParams({ query });\n  };\n\n  return (\n    <div>\n      <Searchbar onSubmit={handleSubmit} />\n      {isLoading && <LoadingMessage>Loading...</LoadingMessage>}\n\n      {error && error !== 'notFound' && (\n        <ErrorMessage>\n          Oops! Something went wrong. Please try again later.\n        </ErrorMessage>\n      )}\n      {movies.length > 0 && <MoviesList films={movies} />}\n      {error === 'notFound' && <p>Movie \"{query}\" not found.</p>}\n    </div>\n  );\n}\n"],"names":["MoviesListContainer","styled","_templateObject","_taggedTemplateLiteral","MovieItem","_templateObject2","MoviesList","_ref","films","location","useLocation","_jsx","children","map","film","_jsxs","Link","to","concat","id","state","from","src","poster_path","mainplaceholder","alt","title","style","width","height","Searchbar","onSubmit","className","css","Formik","initialValues","query","values","actions","resetForm","Form","type","Field","autoComplete","autoFocus","name","placeholder","MoviesPage","_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","_useSearchParams","useSearchParams","_useSearchParams2","params","setParams","get","useEffect","handleSearch","_asyncToGenerator","_regeneratorRuntime","_callee","fetchedMovies","_context","prev","next","searchMovies","sent","results","length","t0","finish","stop","apply","arguments","LoadingMessage","ErrorMessage"],"sourceRoot":""}